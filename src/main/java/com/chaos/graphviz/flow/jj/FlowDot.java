/* FlowDot.java */
/* Generated By:JavaCC: Do not edit this line. FlowDot.java */
package com.chaos.graphviz.flow.jj;
/** Simple brace matcher. */
import com.chaos.graphviz.flow.bean.Node;
import java.util.LinkedList;
import java.util.List;

public class FlowDot implements FlowDotConstants {
    public static List<Node> nodes = new LinkedList<Node>();

/** Root production. */
  static final public void build() throws ParseException {
    startStep();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_STEP:
      case STEP:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_STEP:{
        ifStep();
        break;
        }
      case STEP:{
        step();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    endStep();
    jj_consume_token(0);
}

  static final public void startStep() throws ParseException {Token start;
    Token startNext;
    Token comment;
    jj_consume_token(START_STEP);
    start = jj_consume_token(FLOW_NAME);
Node node = new Node();
        node.setName(start.image);
        node.setLabel("\u5f00\u59cb");
        node.setStyle("START");
    jj_consume_token(TO);
    startNext = jj_consume_token(FLOW_NAME);
node.setNext(startNext.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMENT:{
      jj_consume_token(COMMENT);
      comment = jj_consume_token(LABEL);
node.setComment(comment.image);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(LINE_END);
nodes.add(node);
}

  static final public void ifStep() throws ParseException {Token ifStep;
    Token ifLabel;
    Token ifStepNext1;
    Token ifStepNext2;
    String next = "";
    jj_consume_token(IF_STEP);
    ifStep = jj_consume_token(FLOW_NAME);
Node node = new Node();
        node.setName(ifStep.image);
        node.setStyle("IFTASK");
    jj_consume_token(CALLED);
    ifLabel = jj_consume_token(LABEL);
node.setLabel(ifLabel.image);
    jj_consume_token(TO);
    ifStepNext1 = jj_consume_token(FLOW_NAME);
next += ifStepNext1 + "|";
    jj_consume_token(AND);
    ifStepNext2 = jj_consume_token(FLOW_NAME);
next += ifStepNext2;
        node.setNext(next);
    jj_consume_token(LINE_END);
nodes.add(node);
}

  static final public void step() throws ParseException {Token current;
    Token label;
    Token currentNext;
    Token comment;
    jj_consume_token(STEP);
    current = jj_consume_token(FLOW_NAME);
Node node = new Node();
        node.setName(current.image);
    jj_consume_token(CALLED);
    label = jj_consume_token(LABEL);
node.setLabel(label.image);
    jj_consume_token(TO);
    currentNext = jj_consume_token(FLOW_NAME);
node.setNext(currentNext.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMENT:{
      jj_consume_token(COMMENT);
      comment = jj_consume_token(LABEL);
node.setComment(comment.image);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(LINE_END);
node.setStyle("TASK");
        nodes.add(node);
}

  static final public void endStep() throws ParseException {Token end;
    jj_consume_token(END_STEP);
    end = jj_consume_token(FLOW_NAME);
Node node = new Node();
        node.setName(end.image);
        node.setLabel("\u7ed3\u675f");

        node.setStyle("END");
    jj_consume_token(LINE_END);
nodes.add(node);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FlowDotTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x300,0x300,0x2000,0x2000,};
	}

  /** Constructor with InputStream. */
  public FlowDot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FlowDot(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FlowDotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FlowDot(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new FlowDotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FlowDotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FlowDot(FlowDotTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FlowDotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 4; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
